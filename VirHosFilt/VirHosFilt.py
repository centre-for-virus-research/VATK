#!/usr/bin/python
installationFolder = "/home3/scc20x/Software/mySoftware/VATK/VirHosFilt"

serverFolder = "/home3/scc20x"

#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Jan 11, 2019 03:22:13 PM GMT  platform: Darwin


from sys import platform as sys_pf
if sys_pf == 'darwin':
    import matplotlib
    matplotlib.use("TkAgg")
import sys
import time
import os
from os import listdir
from os.path import isfile, join
import matplotlib.pyplot as plt
from Tkinter import *
import Tkinter, Tkconstants, tkFileDialog


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

inputFolder = ""
hostReference = ""
virusReference = ""
outputFolder = ""





import VirHosFilt_support






def exitProgram(event):
    exit()




def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global searchUnmappedReads


    def openInputFolder(event):
        inputFolder = tkFileDialog.askdirectory(initialdir = "./",title = "Select directory")
        #print inputFolder
        top.Entry1.delete(0,END)
        top.Entry1.insert(0,inputFolder)

    def openOutputFolder(event):
        outputFolder = tkFileDialog.askdirectory(initialdir = "./",title = "Select directory")
        #print outputFolder
        top.Entry1_3.delete(0,END)
        top.Entry1_3.insert(0,outputFolder)

    def changeHostFolder(event):
        #print top.TCombobox1.get()
        top.Listbox1.delete(0,tk.END)
        if top.TCombobox1.get() == "Select host from server":
            os.system("ls /home3/scc20x/hostsFolder/*_virhosfilt >hostlistfile")
        else:
            os.system("ls ./hostsFolder/*_virhosfilt >hostlistfile")
        infile = open("hostlistfile")
        while True:
            line = ((infile.readline().rstrip()).split("_virhosfilt"))[0]
            if not line:
                break
            line2 = (line.split("/"))[-1]
            top.Listbox1.insert(tk.END,line2)
        infile.close()
        os.system("rm -f hostlistfile")

    def changeVirusFolder(event):
        #print top.TCombobox1.get()
        top.Listbox1_4.delete(0,tk.END)
        if top.TCombobox1_3.get() == "Select virus from server":
            os.system("ls /home3/scc20x/virusFolder/*_virhosfilt >hostlistfile")
        else:
            os.system("ls ./virusFolder/*_virhosfilt >hostlistfile")
        infile = open("hostlistfile")
        while True:
            line = ((infile.readline().rstrip()).split("_virhosfilt"))[0]
            if not line:
                break
            line2 = (line.split("/"))[-1]
            top.Listbox1_4.insert(tk.END,line2)
        infile.close()
        os.system("rm -f hostlistfile")

    def addHostGenome(event):
        os.system("python src/python/addIndex.py hostsFolder")
        top.TCombobox1.set("Select host locally")
        top.Listbox1.delete(0,tk.END)
        if top.TCombobox1.get() == "Select host from server":
            os.system("ls ./hostsFolderServer/*_virhosfilt >hostlistfile")
        else:
            os.system("ls ./hostsFolder/*_virhosfilt >hostlistfile")
        infile = open("hostlistfile")
        while True:
            line = ((infile.readline().rstrip()).split("_virhosfilt"))[0]
            if not line:
                break
            line2 = (line.split("/"))[-1]
            top.Listbox1.insert(tk.END,line2)
        infile.close()
        os.system("rm -f hostlistfile")

    def addVirusGenome(event):
        os.system("python src/python/addIndex.py virusFolder")
        top.TCombobox1_3.set("Select virus locally")
        top.Listbox1_4.delete(0,tk.END)
        if top.TCombobox1_3.get() == "Select host from server":
            os.system("ls ./hostsFolderServer/*_virhosfilt >hostlistfile")
        else:
            os.system("ls ./hostsFolder/*_virhosfilt >hostlistfile")
        infile = open("hostlistfile")
        while True:
            line = ((infile.readline().rstrip()).split("_virhosfilt"))[0]
            if not line:
                break
            line2 = (line.split("/"))[-1]
            top.Listbox1_4.insert(tk.END,line2)
        infile.close()
        listOfItems = top.Listbox1_4.get(0, END)
        noneIndex= listOfItems.index("none")
        top.Listbox1_4.selection_set(noneIndex)
        os.system("rm -f hostlistfile")

    def virusSelection(event):

        selectedVirus = top.Listbox1_4.get(ACTIVE)
        if not selectedVirus=="none":
            top.UnmappedCheckButton.configure(state=NORMAL)
            top.RunKrakenCheckButton.configure(state=NORMAL)
            #top.SearchKimeraCheckButton.configure(state=NORMAL)
            
        else:
            top.UnmappedCheckButton.configure(state=DISABLED)
            top.RunKrakenCheckButton.configure(state=DISABLED)
            #top.SearchKimeraCheckButton.configure(state=DISABLED)



    
            


    

#*******************************************************
#********************* Main algorithm start ************
#*******************************************************

    
    def filterReads(event):

        inputFolder = top.Entry1.get()
        outputFolder = top.Entry1_3.get()

        if top.TCombobox1_3.get() == "Select virus from server":
            selectedVirus = "/home3/scc20x/virusFolder/"+top.Listbox1_4.get(ACTIVE) #Change when on server
        else:
            selectedVirus = "./virusFolder/"+top.Listbox1_4.get(ACTIVE) #Change when on server

        if top.TCombobox1.get() == "Select host from server":
            selectedHost = "/home3/scc20x/hostsFolder/"+top.Listbox1.get(ACTIVE) #Change when on server
        else:
            selectedHost = "./hostsFolder/"+top.Listbox1.get(ACTIVE) #Change when on server


        onlyfiles = [f for f in listdir(inputFolder) if isfile(join(inputFolder, f))]
        fileNumber = {}
        for item in onlyfiles:
            if not item[:-8] in fileNumber:
                fileNumber[item[:-8]] = 1
            else:
                fileNumber[item[:-8]] += 1

        paired2filter = []
        single2filter = []
        for files in fileNumber:
            if fileNumber[files]==2:
                paired2filter.append(files)
            if fileNumber[files]==1:
                single2filter.append(files)

        #print paired2filter,single2filter
        numStep = float(len(paired2filter)*3 + len(single2filter)*3)
        step = 0
        for dataset in paired2filter:
            if not dataset[0] ==".":
                top.logArea.configure(state='normal')
                top.logArea.insert(END, "Filtering dataset "+dataset+"\n")
                top.logArea.configure(state='disabled')
                top.logArea.see(END)
                top.logArea.configure(state='normal')
                top.logArea.insert(END, "Mapping reads "+dataset+" to the host reference genome....\n")
                top.logArea.see(END)
                top.logArea.configure(state='disabled')
                top.logArea.update()
                #if top.chkValueKimera.get() == True:
                #    os.system("bowtie2 --local -x "+selectedHost+" -1 "+inputFolder+"/"+dataset+"_1.fastq -2 "+inputFolder+"/"+dataset+"_2.fastq -p 8 -S hostAlignment.sam")
                #else:
                os.system("bowtie2 --local -x "+selectedHost+" -1 "+inputFolder+"/"+dataset+"_1.fastq -2 "+inputFolder+"/"+dataset+"_2.fastq -p 8 -S hostAlignment.sam")
                top.logArea.configure(state='normal')
                top.logArea.insert(END, "Done!\n")
                top.logArea.see(END)
                top.logArea.configure(state='disabled')
                top.logArea.update()
                step += 1
                top.progressbar['value']=(int( (step/numStep)*100))
                top.progressbar.update()
                time.sleep(2)
                top.progressbar.update()
                top.logArea.configure(state='normal')
                top.logArea.insert(END, "Converting alignment format for reads "+dataset+" ....\n")
                top.logArea.see(END)
                top.logArea.configure(state='disabled')
                top.logArea.update()
                os.system("samtools view -bS -h hostAlignment.sam >hostAlignment.bam") 
                top.logArea.configure(state='normal')
                top.logArea.insert(END, "Done!\n")
                top.logArea.see(END)
                top.logArea.configure(state='disabled')
                top.logArea.update()
                step += 1
                top.progressbar['value']=int( (step/numStep)*100)
                top.progressbar.update()
                time.sleep(2)
                top.logArea.configure(state='normal')
                top.logArea.insert(END, "Extracting unmapped reads for dataset "+dataset+"\n\n")
                top.logArea.see(END)
                top.logArea.configure(state='disabled')
                top.logArea.update()
                os.system("bam2fastq --no-aligned --force --strict -o unmapped#.fq hostAlignment.bam")
                top.logArea.configure(state='normal')
                top.logArea.insert(END, "Done!\n")
                top.logArea.see(END)
                top.logArea.configure(state='disabled')
                top.logArea.update()
                os.system("mv unmapped_1.fq "+outputFolder+"/"+dataset+"_noHost_1.fastq")
                os.system("mv unmapped_2.fq "+outputFolder+"/"+dataset+"_noHost_2.fastq")
                os.system("mv hostAlignment.bam "+outputFolder+"/"+dataset+"_hostAlignment.bam")
                step += 1
                top.progressbar['value']=int( (step/numStep)*100)
                top.progressbar.update()
                time.sleep(2)


        for dataset in single2filter:
            if not dataset[0] ==".": 
                top.logArea.configure(state='normal')
                top.logArea.insert(END, "Filtering dataset "+dataset+"\n")
                top.logArea.see(END)
                top.logArea.configure(state='disabled')
                top.logArea.configure(state='normal')
                top.logArea.insert(END, "Mapping reads "+dataset+" to the host reference genome...."+"\n")
                top.logArea.see(END)
                top.logArea.configure(state='disabled')
                top.logArea.update()
                #if top.chkValueKimera.get() == True:
                #    os.system("bowtie2  -local -x "+selectedHost+" -U "+inputFolder+"/"+dataset+"_1.fastq -p 6 -S hostAlignment.sam")
                #else:
                os.system("bowtie2 --local -x "+selectedHost+" -U "+inputFolder+"/"+dataset+"_1.fastq -p 6 -S hostAlignment.sam")

                top.logArea.configure(state='normal')
                top.logArea.insert(END, "Done!\n")
                top.logArea.see(END)
                top.logArea.configure(state='disabled')
                top.logArea.update()
                step += 1
                top.progressbar['value']=int( (step/numStep)*100)
                top.progressbar.update()
                time.sleep(2)
                top.logArea.configure(state='normal')
                top.logArea.insert(END, "Converting alignment format for reads "+dataset+"...."+"\n")
                top.logArea.see(END)
                top.logArea.configure(state='disabled')
                top.logArea.update()
                os.system("samtools view -bS -h hostAlignment.sam >hostAlignment.bam") 
                top.logArea.configure(state='normal')
                top.logArea.insert(END, "Done!\n")
                top.logArea.see(END)
                top.logArea.configure(state='disabled')
                top.logArea.update()
                step += 1
                top.progressbar['value']=int( (step/numStep)*100)
                top.progressbar.update()
                time.sleep(1)
                top.logArea.configure(state='normal')
                top.logArea.insert(END, "Extracting unmapped reads for dataset "+dataset+"\n\n")
                top.logArea.see(END)
                top.logArea.configure(state='disabled')
                top.logArea.update()
                os.system("bam2fastq --no-aligned --force --strict -o unmapped#.fq hostAlignment.bam")
                top.logArea.configure(state='normal')
                top.logArea.insert(END, "Done!\n")
                top.logArea.see(END)
                top.logArea.configure(state='disabled')
                top.logArea.update()
                os.system("mv unmapped_M.fq "+outputFolder+"/"+dataset+"_noHost_1.fastq")
                os.system("mv hostAlignment.bam "+outputFolder+"/"+dataset+"_hostAlignment.bam")
                step += 1
                top.progressbar['value']=int( (step/numStep)*100)
                top.progressbar.update()
                time.sleep(1)
        
        
        
        #If needed align reads to the virus

        if not selectedVirus == "None":
            top.logArea.configure(state='normal')
            top.logArea.insert(END, "Mapping host free reads to the virus reference genome"+"\n")
            top.logArea.see(END)
            top.logArea.configure(state='disabled')
            #onlyfiles = [f for f in listdir(outputFolder) if isfile(join(outputFolder, f))]
            #fileNumber = {}
            #for item in onlyfiles:
            #    if not item[:-8] in fileNumber:
            #        fileNumber[item[:-8]] = 1
            #    else:
            #        fileNumber[item[:-8]] += 1

            #paired2filter = []
            #single2filter = []

            #for files in fileNumber:
            #    if fileNumber[files]==2:
            #    if fileNumber[files]==1:
            ##        paired2filter.append(files)
            #        single2filter.append(files)

            for dataset in paired2filter:
                if not dataset[0] ==".":
                    top.logArea.configure(state='normal')
                    top.logArea.insert(END, "Mapping reads "+dataset+" to the virus reference genome...."+"\n")
                    top.logArea.see(END)
                    top.logArea.configure(state='disabled')
                    top.logArea.update()
                    #if top.chkValueKimera.get() == True:
                    #    os.system("bowtie2 -a --local -x "+selectedVirus+" -1 "+outputFolder+"/"+dataset+"_noHost_1.fastq -2 "+outputFolder+"/"+dataset+"_noHost_2.fastq -p 8 -S virusAlignment.sam")
                    #else:
                    os.system("bowtie2 -x "+selectedVirus+" -1 "+outputFolder+"/"+dataset+"_noHost_1.fastq -2 "+outputFolder+"/"+dataset+"_noHost_2.fastq -p 8 -S virusAlignment.sam")
                    top.logArea.configure(state='normal')
                    top.logArea.insert(END, "Done!\n")
                    top.logArea.see(END)
                    top.logArea.configure(state='disabled')
                    top.logArea.update()
                    top.logArea.configure(state='normal')
                    top.logArea.insert(END, "Converting alignment format for reads "+dataset+"...."+"\n")
                    top.logArea.see(END)
                    top.logArea.configure(state='disabled')
                    top.logArea.update()
                    os.system("samtools view -bS -h virusAlignment.sam >virusAlignment.bam") 
                    top.logArea.configure(state='normal')
                    top.logArea.insert(END, "Done!\n")
                    top.logArea.see(END)
                    top.logArea.configure(state='disabled')
                    top.logArea.update()
                    top.logArea.configure(state='normal')
                    top.logArea.insert(END, "Sorting bam file for reads "+dataset+"...."+"\n")
                    top.logArea.see(END)
                    top.logArea.configure(state='disabled')
                    top.logArea.update()
                    os.system("samtools sort -o virusAlignment_sorted.bam virusAlignment.bam")
                    top.logArea.configure(state='normal')
                    top.logArea.insert(END, "Done!\n")
                    top.logArea.see(END)
                    top.logArea.configure(state='disabled')
                    top.logArea.update()
                    top.logArea.configure(state='normal')
                    top.logArea.insert(END, "Calculating virus coverage for dataset "+dataset+"\n")
                    top.logArea.see(END)
                    top.logArea.configure(state='disabled')
                    top.logArea.update()
                    os.system("samtools depth  virusAlignment_sorted.bam >coverage.txt")
                    top.logArea.configure(state='normal')
                    top.logArea.insert(END, "Done!\n")
                    top.logArea.see(END)
                    top.logArea.configure(state='disabled')
                    top.logArea.update()
                    covFile = open("coverage.txt")
                    position = []
                    coverage = []
                    segments = {} 
                    while True:
                        line = covFile.readline().rstrip()
                        if not line:
                            break
                        fields = line.split("\t")
                        if not fields[0] in segments:
                            segments[fields[0]] = []  
                        segments[fields[0]].append((int(fields[1]),int(fields[2])))

                    #for segment in segments:
                    #    position = []
                    #    coverage = []
                    #    for item in segments[segment]:
                    #        position.append(segments[segment][0])
                    #        coverage.append(segments[segment][1])
                    #    plt.plot(position,coverage)
                    #    plt.savefig(dataset+"_"+segment+"_covPlot.png")
                    #covFile.close()
                    #os.system("mv *_covPlot.png "+outputFolder+"/")
                    os.system("mv virusAlignment_sorted.bam "+outputFolder+"/"+dataset+"_virusAlignment.bam")
                    os.system("rm *.sam *.bam")


                    if top.chkValue.get() == True:
                        top.logArea.configure(state='normal')
                        top.logArea.insert(END, "Extracting unmapped reads for dataset "+dataset+"...."+"\n")
                        top.logArea.see(END)
                        top.logArea.configure(state='disabled')
                        top.logArea.update()
                        os.system("samtools view -f 4 -b " +outputFolder+"/"+dataset+"_virusAlignment.bam > unmapped.bam")
                        top.logArea.configure(state='normal')
                        top.logArea.insert(END, "Done!\n")
                        top.logArea.see(END)
                        top.logArea.configure(state='disabled')
                        top.logArea.update()
                       
                        top.logArea.configure(state='normal')
                        top.logArea.insert(END, "Converting bam to fastq for unmapped on dataset"+dataset+"...."+"\n")
                        top.logArea.see(END)
                        top.logArea.configure(state='disabled')
                        top.logArea.update()
                        os.system("bam2fastq -o "+dataset+"_unmapped#.fastq unmapped.bam")
                        top.logArea.configure(state='normal')
                        top.logArea.insert(END, "Done!\n")
                        top.logArea.see(END)
                        top.logArea.configure(state='disabled')
                        top.logArea.update()


                        os.system("rm -f unmapped.bam")
                        os.system("mv "+dataset+"_unmapped_?.fastq "+outputFolder+"/")


                        if top.chkValueKraken.get()==True:
                            top.logArea.configure(state='normal')
                            top.logArea.insert(END, "Performing Kraken Analysis on sample "+dataset+"...."+"\n")
                            top.logArea.see(END)
                            top.logArea.configure(state='disabled')
                            top.logArea.update()
                            os.system("kraken --db /home2/db/kraken/HumanVirusBacteria/ --output "+dataset+"_krakenOutput.txt --fastq-input "+outputFolder+"/"+dataset+"_unmapped_?.fastq")
                            os.system("mv "+dataset+"_krakenOutput.txt "+outputFolder+"/")
                            top.logArea.configure(state='normal')
                            top.logArea.insert(END, "Done!\n")
                            top.logArea.see(END)
                            top.logArea.configure(state='disabled')
                            top.logArea.update()


                    #if top.chkValueKimera.get() == True:
                    #    top.logArea.configure(state='normal')
                    #    top.logArea.insert(END, "Extracting single mapped reads in host for dataset",dataset+"...."+"\n")
                    #    top.logArea.see(END)
                    #    top.logArea.configure(state='disabled')
                    #    top.logArea.update()
                    #    os.system("samtools view -F 4 -f 8 "+outputFolder+"/"+dataset+"_hostAlignment.bam >hostSingleMapped.sam")
                    #    top.logArea.configure(state='normal')
                    #    top.logArea.insert(END, "Done!\n")
                    #    top.logArea.see(END)
                    #    top.logArea.configure(state='disabled')
                    #    top.logArea.update()
                    #    
                    #    top.logArea.configure(state='normal')
                    #    top.logArea.insert(END, "Extracting single mapped reads in virus for dataset",dataset+"...."+"\n")
                    #    top.logArea.see(END)
                    #    top.logArea.configure(state='disabled')
                    #    top.logArea.update()
                    #    os.system("samtools view -F 4 -f 8 "+outputFolder+"/"+dataset+"_virusAlignment.bam >virusSingleMapped.sam")
                    #    top.logArea.configure(state='normal')
                    #    top.logArea.insert(END, "Done!\n")
                    #    top.logArea.see(END)
                    #    top.logArea.configure(state='disabled')
                    #    top.logArea.update()
                    #    
                    #    top.logArea.configure(state='normal')
                    #    top.logArea.insert(END, "Searching for chimera reads for dataset",dataset+"...."+"\n")
                    #    top.logArea.see(END)
                    #    top.logArea.configure(state='disabled')
                    #    top.logArea.update()
                    #    singleReadsHost = {}
                    #    singleReadsVirus = {}
                    #    hostsRecord = set()
                    #    virusRecord = set()
                    #    singleHostFile = open("hostSingleMapped.sam")
                    #    singleVirusFile = open("virusSingleMapped.sam")
                    #    hostReads = {}
                    #    hostReadsSet = set()
                    #    
                    #    while True:
                    #        line = singleHostFile.readline().rstrip()
                    #        if not line:
                    #            break
                    #        fields = line.split("\t")
                    #        if "S" in fields[5]:
                    #            cigarList = fields[5].split("S")
                    #            if cigarList[0].isdigit() == True:
                    #                if int(cigarList[0]) >50:
                    #                    if not fields[0] in hostReads:
                    #                        hostReads[fields[0]] = (fields[2],fields[3])
                    #                    hostReadsSet.add(fields[0])
                    #        if fields[5][-1]=="S":
                    #            cigarList= fields[5].split("M")
                    #            if cigarList[-1][:-1].isdigit() == True:
                    #                if int(cigarList[-1][:-1]) > 50:
                    #                    if not fields[0] in hostReads:
                    #                        hostReads[fields[0]] = (fields[2],fields[3])
                    #                    hostReadsSet.add(fields[0])

                    #    virusReads = {}
                    #    virusReadsSet = set()
                    #    while True:
                    #        line = singleVirusFile.readline().rstrip()
                    #        if not line:
                    #            break
                    #        fields = line.split("\t")
                    #        if len(fields)>5:
                    #            if "S" in fields[5]:
                    #                cigarList = fields[5].split("S")
                    #                if cigarList[0].isdigit() == True:
                    #                    if int(cigarList[0]) >50:
                    #                        if not fields[0] in virusReads:
                    #                            virusReads[fields[0]] = (fields[2],fields[3])
                    #                        virusReadsSet.add(fields[0])
                    #            if fields[5][-1]=="S":
                    #                cigarList= fields[5].split("M")
                    #                if cigarList[-1][:-1].isdigit() == True:
                    #                    if int(cigarList[-1][:-1]) > 50:
                    #                        if not fields[0] in virusReads:
                    #                           virusReads[fields[0]] = (fields[2],fields[3])
                    #                       virusReadsSet.add(fields[0])

                    #    commonReads= hostReadsSet.intersection(virusReadsSet)
                    #    insPosFile = open(dataset+"_insertions.txt","w")
                    #    insPosFile.write("ReadsName\tHost_Chromosome\tHost_position\tVirus_Chromosome\tVirus_position\n")
                    #    for item in commonReads:
                    #        insPosFile.write(item+"\t"+str(hostReads[item][0])+"\t"+str(hostReads[item][1])+"\t"+str(virusReads[item][0])+str(virusReads[item][0])+"\n")
                        
                    #    insPosFile.close()
                    #    top.logArea.configure(state='normal')
                    #    os.system("mv "+dataset+"_insertions.txt "+outputFolder+"/")
                    #    top.logArea.insert(END, "Done!\n")
                    #    top.logArea.see(END)
                    #    top.logArea.configure(state='disabled')
                    #    top.logArea.update()




                        

                            






            for dataset in single2filter:
                if not dataset[0] ==".":
                    top.logArea.configure(state='normal')
                    top.logArea.insert(END, "Mapping reads "+dataset+" to the host reference genome...."+"\n")
                    top.logArea.see(END)
                    top.logArea.configure(state='disabled')
                    top.logArea.update()
                    os.system("bowtie2 --local -a -x "+selectedVirus+" -U "+outputFolder+"/"+dataset+"_noHost_1.fastq -p 6 -S virusAlignment.sam")
                    top.logArea.configure(state='normal')
                    top.logArea.insert(END, "Converting alignment format for reads "+dataset+"...."+"\n")
                    top.logArea.see(END)
                    top.logArea.configure(state='disabled')
                    top.logArea.update()
                    os.system("samtools view -bS -h virusAlignment.sam >virusAlignment.bam") 
                    top.logArea.configure(state='normal')
                    top.logArea.insert(END, "Sorting bam file for reads "+dataset+"...."+"\n")
                    top.logArea.see(END)
                    top.logArea.configure(state='disabled')
                    top.logArea.update()
                    os.system("samtools sort -o virusAlignment_sorted.bam virusAlignment.bam")
                    top.logArea.configure(state='normal')
                    top.logArea.update()
                    top.logArea.insert(END, "Calculating virus coverage for dataset "+dataset+"\n")
                    top.logArea.see(END)
                    top.logArea.configure(state='disabled')
                    top.logArea.update()
                    os.system("samtools depth  virusAlignment_sorted.bam >coverage.txt")
                    covFile = open("coverage.txt")
                    position = []
                    coverage = []
                    segments = {} 
                    while True:
                        line = covFile.readline().rstrip()
                        if not line:
                            break
                        fields = line.split("\t")
                        if not fields[1] in segments:
                            segments[fields[1]] = []  
                        segments[fields[1]].append((int(fields[1]),int(fields[2])))

                    #for segment in segments:
                    #    position = []
                    #    coverage = []
                    #    for item in segments[segment]:
                    #        position.append(segments[segment][0])
                    #        coverage.append(segments[segment][1])
                    #    plt.plot(position,coverage)
                    #    plt.savefig(dataset+"_"+segment+"_covPlot.png")
                    
                    #covFile.close()
                    #os.system("mv *_covPlot.png "+outputFolder+"/")
                    os.system("mv virusAlignment_sorted.bam "+outputFolder+"/"+dataset+"_virusAlignment.bam")
                    os.system("rm *.sam *.bam")


                    if top.chkValue.get() == True:
                        print "Extracting unmapped from dataset ",dataset
                        os.system("samtools view -f 4 -b " +outputFolder+"/"+dataset+"_virusAlignment.bam >unmapped.bam")
                        print "Converting bam to fastq for unmapped on dataset",dataset
                        os.system("bam2fastq -o "+dataset+"_unmapped#.fastq unmapped.bam")
                        os.system("rm -f unmapped.bam")
                        os.system("mv "+dataset+"_unmapped_?.fastq "+outputFolder+"/")

                        if top.chkValueKraken.get()==True:
                            print "Performing Kraken Analysis on sample",dataset
                            os.system("kraken --db /home2/db/kraken/HumanVirusBacteria/ --output "+dataset+"_krakenOutput.txt --fastq-input "+outputFolder+"/"+dataset+"_unmapped_?.fastq")
                            os.system("mv "+dataset+"_krakenOutput.txt "+outputFolder+"/")







#*******************************************************
#********************* Main algorithm end **************
#*******************************************************

    
    
    
    #def openInputFolder(event):
    #    inputFolder = tkFileDialog.askopenfilename(initialdir = "/",title = "Select file")
    #    print inputFolder







    
    root = tk.Tk()
   
    
    VirHosFilt_support.set_Tk_var()

    

    top = Toplevel1 (root)
    
    VirHosFilt_support.init(root, top)

    
    top.TCombobox1.bind("<<ComboboxSelected>>", changeHostFolder )
    top.TCombobox1_3.bind("<<ComboboxSelected>>", changeVirusFolder )
    top.Button1.bind('<Button-1>' ,openInputFolder)
    top.Button1_1.bind('<Button-1>' ,openOutputFolder)
    top.Button2.bind('<Button-1>' ,exitProgram)
    top.Button2_5.bind('<Button-1>' ,filterReads)
    top.addHostButton.bind('<Button-1>' ,addHostGenome)
    top.Button1_4.bind('<Button-1>' ,addVirusGenome)
    top.Listbox1_4.bind('<Motion>',virusSelection)
    

    
    


    #*********** Initialise hosts list ****************
    if top.TCombobox1.get() == "Select host from server":
        os.system("ls "+serverFolder+"/hostsFolder/*_virhosfilt >hostlistfile")
    else:
        os.system("ls "+installationFolder+"/hostsFolder/*_virhosfilt >hostlistfile")
    infile = open("hostlistfile")
    while True:
        line = ((infile.readline().rstrip()).split("_virhosfilt"))[0]
        if not line:
            break
        line2 = (line.split("/"))[-1]
        top.Listbox1.insert(tk.END,line2)
    infile.close()
    os.system("rm -f hostlistfile")


    #*********** Initialise virus list ****************
    if top.TCombobox1_3.get() == "Select virus from server":
        os.system("ls "+serverFolder+"/virusFolder/*_virhosfilt >hostlistfile")
    else:
        os.system("ls "+installationFolder+"/virusFolder/*_virhosfilt >hostlistfile")
    infile = open("hostlistfile")
    while True:
        line = ((infile.readline().rstrip()).split("_virhosfilt"))[0]
        if not line:
            break
        line2 = (line.split("/"))[-1]
        top.Listbox1_4.insert(tk.END,line2)
    infile.close()
    listOfItems = top.Listbox1_4.get(0, END)
    noneIndex= listOfItems.index("none")
    top.Listbox1_4.selection_set(noneIndex)
    os.system("rm -f hostlistfile")


    



    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    VirHosFilt_support.set_Tk_var()
    top = Toplevel1 (w)
    VirHosFilt_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        
        def selectKraken(event):
            if self.chkValue.get() == False:
                self.RunKrakenCheckButton.configure(state=NORMAL)
                searchUnmappedReads = True
            else:
                self.RunKrakenCheckButton.configure(state=DISABLED)
                searchUnmappedReads = False
            print searchUnmappedReads


        
        

        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("960x460+609+943")
        top.title("VirHosFilt")
        top.configure(highlightcolor="black")

        self.progressbar=ttk.Progressbar(top,orient="horizontal",length=720,mode="determinate")
        self.progressbar.place(x=20,y=430)
        self.progressbar['maximum'] = 100

        self.Label1 = tk.Label(top)
        self.Label1.place(x=20, y=20, height=20, width=80)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(text='''Input folder''')

        self.Entry1 = tk.Entry(top)
        self.Entry1.place(x=20, y=40,height=30, width=300)
        self.Entry1.configure(background="white")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.insert(0,"Please select a folder....")

        self.Button1 = tk.Button(top)
        self.Button1.place(x=330, y=40, height=30, width=120)
        self.Button1.configure(activebackground="#f9f9f9")
        self.Button1.configure(text='''Open folder''')

        self.TCombobox1 = ttk.Combobox(top,state='readonly')
        self.TCombobox1.place(x=20, y=100, height=30
                , width=300)
        #self.TCombobox1.configure(textvariable=VirHosFilt_support.combobox)
        #self.TCombobox1.configure(takefocus="")
        self.TCombobox1['values']=("Select host from server","Select host locally")
        self.TCombobox1.set("Select host from server")

        self.Listbox1 = tk.Listbox(top)
        self.Listbox1.configure(exportselection=False)
        self.Listbox1.place(x=20, y=140, height=120
                        , width=300)
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(font="TkFixedFont")
        self.Listbox1.configure(selectbackground="#c4c4c4")
        self.Listbox1.configure(width=214)

        self.addHostButton = tk.Button(top)
        self.addHostButton.place(x=330, y=140, height=30, width=120)
        self.addHostButton.configure(activebackground="#f9f9f9")
        self.addHostButton.configure(text='''Add host''')

        #self.Button1_2 = tk.Button(top)
        #self.Button1_2.place(relx=0.309, rely=0.55, height=28, width=109)
        #self.Button1_2.configure(activebackground="#f9f9f9")
        #self.Button1_2.configure(text='''Open folder''')

        self.TCombobox1_3 = ttk.Combobox(top,state='readonly')
        self.TCombobox1_3.place(x=500, y=100, height=30
                , width=300)
        #self.TCombobox1_3.configure(textvariable=VirHosFilt_support.combobox)
        #self.TCombobox1_3.configure(takefocus="")
        self.TCombobox1_3['values']=("Select virus from server","Select virus locally")
        self.TCombobox1_3.set("Select virus from server")

        self.Listbox1_4 = tk.Listbox(top)
        self.Listbox1_4.configure(exportselection=False)
        self.Listbox1_4.place(x=500, y=140, height=120
                        , width=300)
        self.Listbox1_4.configure(background="white")
        self.Listbox1_4.configure(font="TkFixedFont")
        self.Listbox1_4.configure(selectbackground="#c4c4c4")
        self.Listbox1_4.configure(width=214)
        

        self.Button1_1 = tk.Button(top)
        self.Button1_1.place(x=810, y=40, height=30, width=120)
        self.Button1_1.configure(activebackground="#f9f9f9")
        self.Button1_1.configure(text='''Open folder''')

        #self.Button1_3 = tk.Button(top)
        #self.Button1_3.place(relx=0.808, rely=0.581, height=28, width=109)
        #self.Button1_3.configure(activebackground="#f9f9f9")
        #self.Button1_3.configure(text='''Open folder''')

        self.Entry1_3 = tk.Entry(top)
        self.Entry1_3.place(x=500, y=40,height=30, width=300)
        self.Entry1_3.configure(background="white")
        self.Entry1_3.configure(font="TkFixedFont")
        self.Entry1_3.configure(selectbackground="#c4c4c4")
        self.Entry1_3.insert(0,"Please select a folder....")

        self.Button1_4 = tk.Button(top)
        self.Button1_4.place(x=810, y=140, height=30, width=120)
        self.Button1_4.configure(activebackground="#f9f9f9")
        self.Button1_4.configure(text='''Add virus''')

        self.Button2 = tk.Button(top)
        self.Button2.place(x=810, y=230, height=30, width=60)
        self.Button2.configure(activebackground="#f9f9f9")
        self.Button2.configure(text='''Exit''')

        self.Button2_5 = tk.Button(top)
        self.Button2_5.place(x=870, y=230, height=30, width=60)
        self.Button2_5.configure(activebackground="#f9f9f9")
        self.Button2_5.configure(text='''Run''')

        self.Label2 = tk.Label(top)
        self.Label2.place(x=490, y=20, height=18, width=120)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(text='''Output folder''')


        self.Label3 = tk.Label(top)
        self.Label3.place(x=10, y=280, height=18, width=120)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(text='''Log windows''')

        self.chkValue = tk.BooleanVar() 
        self.chkValue.set(True)
        self.UnmappedCheckButton = tk.Checkbutton(top,state=DISABLED,variable=self.chkValue)
        self.UnmappedCheckButton.place(x=730,y=300,height=20,width=200)
        self.UnmappedCheckButton.configure(text="Report unmapped reads")
        self.UnmappedCheckButton.bind('<Button-1>',selectKraken)

        self.chkValueKraken = tk.BooleanVar() 
        self.chkValueKraken.set(True)
        self.RunKrakenCheckButton = tk.Checkbutton(top,state=DISABLED,variable=self.chkValueKraken)
        self.RunKrakenCheckButton.place(x=735,y=330,height=20,width=200)
        self.RunKrakenCheckButton.configure(text="Run Kraken on unmapped")

        self.threadsEntry = tk.Entry(top,justify="right")
        self.threadsEntry.place(x=745,y=390,height=30,width=50)
        self.threadsEntry.insert(0,"8")

        self.threadsLabel = tk.Label(top)
        self.threadsLabel.place(x=800,y=400,height=20,width=130)
        self.threadsLabel.configure(text="Number of threads")

        #self.chkValueKimera = tk.BooleanVar() 
        #self.chkValueKimera.set(True)
        #self.SearchKimeraCheckButton = tk.Checkbutton(top,state=DISABLED,variable=self.chkValueKimera)
        #self.SearchKimeraCheckButton.place(x=740,y=360,height=20,width=200)
        #self.SearchKimeraCheckButton.configure(text="Search Chimera Fragments")



        self.Frame1 = tk.Frame(top)
        self.Frame1.place(x=20, y=300, height=120, width=720)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(width=125)
        self.logArea = tk.Text(top)#,state='disabled')
        self.logArea.place(x=25,y=305,height=110, width=710)
        self.logArea.configure(background="white",borderwidth=5)
        self.logArea.configure(selectbackground="#c4c4c4")
        #self.logArea.configure(highlightbackground="Black")

        

if __name__ == '__main__':
    vp_start_gui()





